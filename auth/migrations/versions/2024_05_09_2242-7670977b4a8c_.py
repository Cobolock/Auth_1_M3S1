"""empty message

Revision ID: 7670977b4a8c
Revises: 9a2e8848d8c3
Create Date: 2024-05-09 22:42:57.487750

"""

from datetime import datetime
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "7670977b4a8c"
down_revision: Union[str, None] = "9a2e8848d8c3"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("entries")
    connection = op.get_bind()
    connection.execute(sa.DDL("""CREATE TABLE entries (
            created timestamp with time zone DEFAULT now() NOT NULL,
            ip_address character varying NOT NULL,
            location character varying NOT NULL,
            user_agent character varying NOT NULL,
            user_id uuid NOT NULL,
            id uuid NOT NULL
        )
        PARTITION BY RANGE (created)"""))
    connection.execute(sa.DDL("""ALTER TABLE ONLY entries
            ADD CONSTRAINT entries_pkey PRIMARY KEY (id, created)"""))
    connection.execute(sa.DDL("""ALTER TABLE entries
            ADD CONSTRAINT entries_user_id_fkey
            FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE"""))
    op.create_foreign_key(None, "entries", "users", ["user_id"], ["id"], ondelete="CASCADE")
    for year in range(2024, 2034):
        for z_month in range(12):
            month = z_month + 1
            if month == 12:
                next_month = 1
                next_year = year + 1
            else:
                next_month = month + 1
                next_year = year
            table_name = f"entries_y{year}m{month}"
            d_from = datetime.strptime(f'{year}-{month}-01', '%Y-%m-%d')
            d_to = datetime.strptime(f'{next_year}-{next_month}-01', '%Y-%m-%d')
            op.execute(sa.DDL(f"""
                CREATE TABLE {table_name} PARTITION OF entries
                FOR VALUES FROM ('{d_from}') TO ('{d_to}');"""))
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("entries")
    op.create_table(
        "entries",
        sa.Column(
            "created",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("ip_address", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("location", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("user_agent", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("user_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], name="entries_user_id_fkey", ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id", name="entries_pkey"),
    )
    # ### end Alembic commands ###
