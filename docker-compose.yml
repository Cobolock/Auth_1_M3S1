version: "3.9"
name: practicum
services:

  # Common services

  movies-postgres:
    image: postgres:16-alpine
    env_file:
      - infra/movies-postgres/.env.docker
    volumes:
      - ./infra/movies-postgres/pg_dump.sql:/docker-entrypoint-initdb.d/pg_dump.sql
      - movies_postgres_data:/data/postgres
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U app -d movies_database" ]
      interval: 5s
      timeout: 5s
      retries: 5
    profiles:
      - infra
      - movies-admin

  elasticsearch:
    image: elasticsearch:8.12.2
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    healthcheck:
      test: curl -u elastic:elastic -s -f elasticsearch:9200/_cat/health >/dev/null || exit 1
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1.00'
          memory: 1GB
        reservations:
          cpus: '0.50'
          memory: 1GB
    profiles:
      - infra
      - etl
      - movies-api

  init-elasticsearch:
    image: curlimages/curl:8.6.0
    command: /bin/sh /data/create_indexes.sh http://elasticsearch:9200
    volumes:
      - ./infra/elasticsearch/:/data/
    depends_on:
      elasticsearch:
        condition: service_healthy
    profiles:
      - infra
      - etl

  # ETL

  etl:
    build:
      context: etl
      target: production
    env_file:
      - etl/.env.docker
    volumes:
      - etl_data:/data
    depends_on:
      movies-postgres:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    profiles:
      - etl

  # Movies API

  movies-api:
    build:
      context: movies_api
      target: production
    env_file:
      - movies_api/.env.docker
    depends_on:
      elasticsearch:
        condition: service_healthy
    profiles:
      - movies-api

  movies-api-nginx:
    image: nginx:1.25-alpine
    volumes:
      - ./infra/movies-api-nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./infra/movies-api-nginx/configs:/etc/nginx/conf.d:ro
    ports:
      - "7000:80"
    depends_on:
      movies-api:
        condition: service_started
    profiles:
      - movies-api

  movies-redis:
    image: redis:7-alpine
    profiles:
      - infra
      - movies-api

  # Movies Admin

  movies-admin:
    build: movies_admin
    command: >
      bash -c "python manage.py collectstatic --noinput --clear &&
               uwsgi --ini uwsgi.ini"
    env_file:
      - ./movies_admin/.env.docker
    volumes:
      - movies_admin_static_data:/opt/static:rw
    depends_on:
      movies-postgres:
        condition: service_healthy
    profiles:
      - movies-admin

  movies-admin-nginx:
    image: nginx:1.25-alpine
    volumes:
      - ./infra/movies-admin-nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./infra/movies-admin-nginx/configs:/etc/nginx/conf.d:ro
      - movies_admin_static_data:/data/static:ro
    ports:
      - "7001:80"
    depends_on:
      movies-admin:
        condition: service_started
    profiles:
      - movies-admin

  # Auth

  auth-api:
    build:
      context: auth
      target: production
    command: >
      bash -c "alembic upgrade head
      && gunicorn --bind 0.0.0.0:8000 -k uvicorn.workers.UvicornWorker auth.main:app"
    env_file:
      - ./auth/envs/.env.docker
    depends_on:
      auth-postgres:
        condition: service_healthy
    profiles:
      - auth

  auth-postgres:
    image: postgres:16-alpine
    env_file:
      - ./infra/auth-postgres/.env.docker
    volumes:
      - auth_postgres_data:/data/postgres
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U auth_user -d auth_db" ]
      interval: 5s
      timeout: 5s
      retries: 5
    profiles:
      - auth-infra
      - auth

  auth-redis:
    image: redis:7-alpine
    volumes:
      - auth_redis_data:/data
    profiles:
      - auth-infra
      - auth

  auth-nginx:
    image: nginx:1.25-alpine
    volumes:
      - ./infra/auth-nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./infra/auth-nginx/configs:/etc/nginx/conf.d:ro
    ports:
      - "7002:80"
    depends_on:
      auth-api:
        condition: service_started
    profiles:
      - auth

  auth-jaeger:
    image: jaegertracing/all-in-one:1.57
    ports:
      - "6831:6831/udp"
      - "16686:16686"
    profiles:
      - auth-infra
      - auth

volumes:
  etl_data:
  movies_postgres_data:
  elasticsearch_data:
  movies_admin_static_data:
  auth_postgres_data:
  auth_redis_data:
